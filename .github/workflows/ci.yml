name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - staging
  pull_request:
    branches:
      - dev
      - staging

jobs:
  install:
    runs-on: ubuntu-latest
    env:
      DATABASE_FILE: 'data/database.csv'
      API_KEY: 'TEST_KEY'
      ASSETS_PATH: 'assets/'
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install dependencies
        run: poetry install --no-root

  dev:
    runs-on: ubuntu-latest
    needs: install
    env:
      DATABASE_FILE: 'data/database.csv'
      API_KEY: 'TEST_KEY'
      ASSETS_PATH: 'assets/'
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install dependencies
        run: poetry install --no-root

      - name: Check if server starts
        run: sh check_dev_server.sh

  test:
    runs-on: ubuntu-latest
    needs: install
    env:
      DATABASE_FILE: 'data/database.csv'
      API_KEY: 'TEST_KEY'
      ASSETS_PATH: 'assets/'
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run tests
        run: poetry run python src/tests.py

  check_code:
    runs-on: ubuntu-latest
    needs: install
    env:
      DATABASE_FILE: 'data/database.csv'
      API_KEY: 'TEST_KEY'
      ASSETS_PATH: 'assets/'
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run Black
        run: |
          echo "Running Black..."
          poetry run black .

      - name: Run Flake8
        run: |
          echo "Running Flake8..."
          poetry run flake8 .

      - name: Run Pylint
        run: |
          echo "Running Pylint..."
          poetry run pylint src/main.py src/auth.py src/database_service.py src/models.py src/tests.py

      - name: Run Mypy
        run: |
          echo "Running Mypy..."
          poetry run mypy src/main.py src/auth.py src/database_service.py src/models.py src/tests.py

  create_pull_request:
    runs-on: ubuntu-latest
    needs: [ install, dev, test, check_code ]
    if: github.ref == 'refs/heads/dev'
    environment: dev
    env:
      FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: staging
          branch: dev
          commit-message: "Merge dev into staging after successfull push to dev"
          committer: Edvardas Kostkevicius <edvardas42@gmail.com>
          author: Edvardas Kostkevicius <edvardas42@gmail.com>
          title: "Merge dev into staging after successfull push to dev"
          body: "Automated PR to merge changes from dev to staging."
          assignees: Edvardas Kostkevicius <edvardas42@gmail.com>
